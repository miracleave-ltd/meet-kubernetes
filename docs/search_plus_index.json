{"./":{"url":"./","title":"はじめに","keywords":"","body":"はじめに 前提 Docker Desktop Git ※Windows/MacOSで確認しました。 Kubernetes Docker Desktopには、Kubernetesサーバーとクライアントが内包されています。 Dockerインスタンス内でローカルに実行され、単一ノードクラスターとなっています。 タスクバーにあるを右クリックして、 Settings を選択してください。 Macの方：Dashboard,もしくはpreferenceをクリックしてください。 メニューにある Kubernetes を選択してください。 Enable Kubernetes をチェックし、 Apply&Restart をクリックしてください。 しばらくすると③の箇所にKubernetes Runningと表示します。 Kompose Windowsの場合 Windowsでは、Chocolateyでインストールできます。 ※Chocolateryをインストールしていない方はこちら Power Shellを起動する Windowsのスタートボタンを押します。 メニューにある「Windows PowerShell」を右クリックして、 管理者として実行 を選択します。 Power Shellにインストールコマンドを入力し、実行します。 choco install kubernetes-kompose choco list -l を実行して、 kubernetes-kompose が表示されるとインストール完了です。 PS C:\\> choco list -l Chocolatey v0.10.15 chocolatey 0.10.15 kubernetes-kompose 1.22.0 2 packages installed. MacOSの場合 MacOSでは、Homebrewでインストールできます。 ※Homebrewをインストールしていない方はこちら ターミナルを起動する。 ターミナルにインストールコマンドを入力し、実行します。 brew install kompose brew list を実行して、 kompose が表示されるとインストール完了です。 pc:go-react-todo-master pc$ brew list kompose "},"Section1.html":{"url":"Section1.html","title":"セクション１","keywords":"","body":"Section1 目次 No.1 Dockerとは No.2 Kubernetesとは No.3 Kubernetesのそれぞれのサービスの概要 No.4 Komposeとは Dockerとは 概要 コンテナ技術を使ったアプリケーションの実行環境を構築/運用するためのプラットフォームです。アプリケーションの実行に必要な物を一つにまとめ、Dockerイメージ管理することで、アプリケーションの可搬性を上げることができます。 コンテナとは 現実世界で表すと以下のような物です。 コンテナは内部に物を貯める容器で運搬可能です。 陸から船に運ぶ際にクレーンなどを使ってコンテナを移動させます。 このように現実世界でのコンテナは非常に便利で物を貯めて持ち運ぶのを容易にしてくれます。 では、コンピュータの世界のコンテナとは一体どんなものなのか？ コンテナはアプリケーションの実行に必要なモジュール（ファイルやディレクトリ群）をコンテナとしてまとめることができ、複数のコンテナを組み合わせることで１つのアプリケーションを構築することができます。 しかもこのコンテナの元となるDockerイメージをDocker Hub（リポジトリ）などのリポジトリで共有することによって、Dockerをインストールしている環境であれば誰でも一緒の環境を構築することができます。 Dockerのメリット ・資源の効率化 Dockerはホストカーネルを共有し、従来のハイパーバイザ型のHyper-Vやホスト型のVirtualBox等のようにOSを丸ごとインストールする必要がなく資源を効率的に扱える。 ・アプリ実行環境構築の容易さ Dockerはアプリケーションとライブラリを同一のコンテナ内に固めることができ、一度固めたコンテナは軽量で持ち運びが容易。DockerがインストールされているOSであれば移動が容易に行える。 ・設定間違いなどの不可逆的操作の廃棄の容易さ 複雑なシステムであれば一度設定を間違えると、影響範囲の調査などに時間がかる可能性があります。しかしDockerであれば設定を間違えたと思えばすぐさま削除することができる。変更も「Docker file」を修正することで再構築でき、イメージを段階的に残しておくことで設定間違いの前の状態にすぐにもどることができる。 Kubernetes(K8s)とは Kubernetes（クバネティス/クバネテス/クーべネティス、K8s）は、米Googleのエンジニアを中心とするコミュニティで開発が進められている、オープンソースのコンテナオーケストレーションシステムです。Googleだけでなく、Microsoft,Red Hat,IBMなどが開発に参加しています。提供機能も豊富で開発スピードも早く、大規模なシステムでの導入実績も豊富でコンテナオーケストレーションツールのデファクトスタンダートとも言えます。 ※コンテナオーケストレーションツールはKubernets以外にも、docker SwarmやApache Mesosなどがあります。 なぜKubernetesなどのコンテナオーケストレーションシステムがあるのか もしKubernertesなどのコンテナオーケストレーションシステムがなかった場合、複数のDockerの管理、ホストが違うコンテナ間のネットワーク管理、コンテナの監視、サーバーが停止した際の対応などが大変になります。小規模の場合は別途作業すればいいのですが、規模が大きくなるほど煩雑になります。 例 DBを必要としない単純なwebサイトがあるとします。一台のDockerがインストールされているサーバーにnginxとphpのコンテナを立てます。最初の頃は問題なく動いていましたが、アクセス数が増えたためもう一つ同じ構造のサーバーを立てます。さらにアクセス数が増え１０台のサーバーを立てる必要がありました。それぞれのサーバーにはnginxとphpのコンテナが立っています。 これらnginxとphpのコンテナが立っている１０台のサーバーの面倒を見るとなるとかなり大変です。 そこで使うのが、k8sなどのコンテナオーケストレーションシステムです。このk8sなどを使うことによって一台ずつサーバーを管理する必要がなくなり、サーバーが１つダウンした際には自動で新しいサーバーを立ててくれたり、監視するのも一台ずつではなく１０台のサーバーとすべてのコンテナをまとめて監視することができます。 このようにk8sがあることによって、規模の大きいDockerの管理や自動化を容易に行えます。 Kubernetesのそれぞれのサービスの概要 コンポーネント コンポーネントとはk8sを構成しているものです。 大きく分けてコントロールプレーンとノードがあります。 名前 役割 Control Planes k8sの心臓部分。指揮者的な役割別名：Admin、Master Nodes 実際にコンテナが動作する環境。演奏する側別名：worker 画像元https://kubernetes.io/ja/docs/concepts/overview/components/ クラスタ(Kubernetes Cluster) クラスタとは、アプリケーションを実行するためにKubernetesが使用する物理マシンや仮想マシン、その他のインフラリソースのセットのことを指します。 つまり、Control PlanesとNodesのかたまりをクラスタと呼びます。 コンポーネント（Control Planes） etcd(バックエンドデータベース) etcdと呼ばれる分散キーバリューストア(KVS)を使って、クラスタの構成情報を管理しています。 ※KVSとは、データ管理システムの種類の一つで、保存したいデータ（value：値）に対し、対応する一意の標識（key：キー）を設定し、これらをペアで格納する方式。 API Server Kubernetesのリソース情報を管理するためのフロントエンドのREST APIです。他のコンポーネントはetcdの情報にAPI Serverを介してアクセスします。 また、プログラマがこのAPI Serverにアクセスするには後ほど説明するKubectlコマンドやWebのGUIツールを使います。 Kubernetesの受付役のような存在です。 Scheduler SchedulerはPodをどのノードで動かすかを制御するバックエンドコンポーネントです。ノードの割り当てられていないPodに対して、k8sクラスタの状態を確かめ、空きスペースを探してPodを実行させるスケジューリングを行います。 Kube Controller Manager k8sクラスタの状態を常に監視するバックエンドコンポーネントです。定義ファイルで指定したものと実際のノードやコンテナで動作している状態をまとめて管理しています。 Cloud Controller Manager クラウド（AWS/GCP/Azuruなど）の機能と連携する(ロードバランサー) コンポーネント（Nodes） 名前 役割 kubelet 各ノードで実行されるエージェントマスターノードとやりとりして指示に従う読み方：クューブレット kube-proxy NodeのNWルール（iptablesなど）を追加、削除、変更している読み方：クューブプロキシ コンテナランタイム コンテナを実行するためのソフトウェア ノード(Node) ノードは、Kubernetesを実行している物理マシンまたは仮想マシンで、ポッドを動かします。ノードの管理はマスターサーバが行います。 ポッド(Pod) Pod は1つ以上のコンテナから構成されており、ネットワークは隔離されておらず、IP Addressなどは共有しています。Kubernetesの最小単位です。 レプリカセット(Replica Set) レプリカセットは、指定した数のポッドレプリカがいつでも実行されていることを確認します。両方とも、複製されたシステムの簡単なスケーリングを可能にし、ポッドが再起動したとき、または失敗したときにポッドの再作成を処理します。 クラスタ内にPodをいくつ起動しておくかの値を「レプリカ数」と呼びます。 また、Podがダウンしてしまった際にも、Replica Setは指定されたレプリカ数になるようにコンテナを起動します。 Deployments(デプロイメント) DeploymentsはPodとReplicaSetをまとめたもので、ReplicaSetの履歴を管理をします。 Deploymentオブジェクトの目的の状態を記述するだけで、目的の状態に変更してくれます。 Service(サービス) サービスは、単一の安定したIPアドレスや対応するDNS名など、一連のポッドとそれらにアクセスする手段を定義します。 Serviceにはいくつか種類があり、そのうちのよく使われる３つを紹介します。 ・clusterIP ClusterIPはKubernetes内での通信で利用します。クラスタ内でIPアドレスが払い出され、それを利用してPod間で通信を行います。 ・NodePort NodePortはKubernetesのNodeのランダムなポートを使用して外部のサーバーからの疎通性を取ってくれます。 その後はClusterIPのServiceと同様です。 ・LoadBalancer LoadBalancerはNodePortのServiceを作成した上で、さらに外部のLoadBalanerを作成し、LoadBalancerのUpstreamとしてNodePortで疎通性を取っているポートへ転送するよう設定してくれます。 ラベル(Label) ラベルは、ポッドなどのリソースにアタッチされるキー/値のペアです。ラベルを使用して、リソースのサブセットを整理し、選択することができます。 kubectl（クューブコントロール） API経由でKubenetesを操作するためのクライアントツール Komposeとは docker-compose.yml をk8s用の設定ファイルに変換してくれるツールです。 "},"Section2.html":{"url":"Section2.html","title":"セクション２","keywords":"","body":"Section2 Komposeを利用して、Kubernetes用yamlを作成しよう React+Go(Gin)+PostgresSQLのTodoアプリを使用していきます。 今回利用するアプリをGitHubよりプログラムをダウンロードします。 ローカル環境にDockerイメージを作成します。 ※ダウンロードしたファイルを解凍したフォルダで実行してください。 フロントアプリのビルドを行います。 次のコマンドを実行してください。 docker-compose run client npm run build バックエンドのビルドを行います。 次のコマンドを実行してください。 docker-compose run server go build アプリイメージのビルドを行います。 次のコマンドを実行してください。 docker-compose -f docker-compose.prod.yml build Komposeでは、docker-compose.ymlファイルにKompose用Labelsを記載することで、Kompose用の設定を行うことができます。 参考URL：https://kompose.io/user-guide/ 今回は以下の３点を修正します。 ローカルでKubernetesを実行するため、 kompose.service.type を設定します。 ローカルコンテナイメージを利用するため、 kompose.image-pull-policy を設定します。 Komposeで depends_on が対応していないため、 port を追加で設定します。 対象ファイル：(go-react-todo-master)/docker-compose.prod.yml※port,labelsを追加しています。 version: '3' services: postgres: image: postgres environment: - POSTGRES_PASSWORD=postgres ports: - \"5432:5432\" server: build: ./server command: ./app ports: - \"3001\" depends_on: - \"postgres\" environment: - POSTGRES_PASSWORD=postgres labels: kompose.image-pull-policy: Never nginx: build: ./nginx ports: - \"8000:80\" labels: kompose.service.type: nodeport kompose.image-pull-policy: Never Komposeコマンドでdocker-compose.ymlを変換します。 今回は開発時の者は不要ですので、production環境用のymlファイルをもとに変換します。 ※ダウンロードしたファイルを解凍したフォルダで実行してください。 kompose convert -f docker-compose.prod.yml (WindowsPowerShell) 変換後の確認を行います。 次のファイルが生成されていることを確認してください。 nginx-service.yaml postgres-service.yaml server-service.yaml nginx-deployment.yaml postgres-deployment.yaml server-deployment.yaml Kubernetes用のyamlファイルは生成できたのですが、Komposeの変換だけでは対応しきれない部分の修正を行います。 ローカルイメージを取得するため、ローカルイメージ名を記載します。 対象ファイル：(go-react-todo)/server-deployment.yaml Windowsの場合 - [36] image: server + [36] image: go-react-todo-master_server Macの場合 - [34] image: server + [34] image: go-react-todo-master_server 対象ファイル：(go-react-todo)/nginx-deployment.yaml Windowsの場合 - [33] - image: nginx + [33] - image: go-react-todo-master_nginx Macの場合 - [31] - image: nginx + [31] - image: go-react-todo-master_nginx Kubernetesに変換したファイルをKubernetesに反映します。 kubectl apply -f nginx-service.yaml -f postgres-service.yaml -f server-service.yaml -f nginx-deployment.yaml -f postgres-deployment.yaml -f server-deployment.yaml (WindowsPowerShell) Kubernetesの状態確認を行います。 kubectl get pod,deploy,svc ※kubectlでは略語を使用できます。 名称 略称 pods pod deployments deploy services svc (WindowsPowerShell) ![kubectl-get-pod-service-deploy](img/kubectl-get-pod-service-deploy.png) Kubernetesに反映したプロジェクトを確認します。 Kubernetesの状態確認を行った際にNginxの公開されているポートを確認します。 NodePortは動的にポート番号を割り振るため、個々の端末によって異なります。 上記で確認したポート番号のLocalhostにアクセスしてください。 http://localhost:XXXXX Todoアプリが表示しましたらデプロイ完了です。 "},"Section3.html":{"url":"Section3.html","title":"セクション３","keywords":"","body":"Section3 修正したプログラムを反映しよう 実際にファイルを修正して、実際に修正された内容をどのようにデプロイするか確認してみましょう。 次のファイルを修正してください。 青背景から赤背景に変更します。 対象ファイル：(go-react-todo-master)/client/src/stylesheets/main.less - [2] background-color:lightcyan; + [2] background-color:lightcoral; - [6] background-color:lightcyan; + [6] background-color:lightcoral; 修正したファイルをビルドします。 docker-compose run --rm client npm run build ビルドしたファイルをイメージにするため、イメージビルドを行います。 docker-compose -f docker-compose.prod.yml build Kubernetesにデプロイします。 kubectl rollout restart deploy nginx 赤い背景色になったらデプロイ完了です。 "},"Section4.html":{"url":"Section4.html","title":"セクション４","keywords":"","body":"Section4 今回のハンズオンで汚してしまった環境を片づけます。 kubernetesからdeploymentsの情報を取得して、現在存在するdeploymentsの情報をKubernetesから削除します。 kubectl get deploy # NAME READY UP-TO-DATE AVAILABLE AGE # nginx 1/1 1 1 97m # postgres 1/1 1 1 97m # server 1/1 1 1 97m kubectl delete deploy nginx postgres server kubernetesからservicesの情報を取得して、現在存在するservicesの情報をKubernetesから削除します。 kubectl get svc # NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE # kubernetes ClusterIP 10.96.0.1 443/TCP 6d21h # nginx NodePort 10.106.171.137 8000:30445/TCP 100m # postgres ClusterIP 10.109.66.138 5432/TCP 100m # server ClusterIP 10.96.82.23 3001/TCP 100m kubectl delete svc nginx postgres server kubernetesから各情報が削除されたことを確認します。 ※service/kubernetesは標準で起動されるものとなります。 kubectl get pod,svc,deploy # NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE # service/kubernetes ClusterIP 10.96.0.1 443/TCP 6d21h "},"Chocolatery.html":{"url":"Chocolatery.html","title":"Chocolateryインストール手順","keywords":"","body":"Chocolateryインストール手順 Chocolateryとは OSや言語毎にパケージマネージャとよばれるツールが提供され、ソフトウエアや拡張機能のインストールはパッケージマネージャを利用して行うことができます。 ChocolateryはWindows用のパッケージマネージャーとなります。 インストール手順 Power Shellを起動する Windowsのスタートボタンを押します。 メニューにある「Windows PowerShell」を右クリックして、 管理者として実行 を選択します。 Chocolatery公式サイトにあるインストールページにアクセスし、インストールコマンドを確認します。 Power Shellにインストールコマンドを入力し、実行します。 PS C:\\> Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) 動作確認 chocoコマンドが実行できればインストール完了です。 PS C:\\> choco list -l Chocolatey v0.10.15 chocolatey 0.10.15 1 packages installed. 以上でインストールは完了です。 "},"Homebrew.html":{"url":"Homebrew.html","title":"Homebrewインストール手順","keywords":"","body":"Homebrewインストール手順 Homebrewとは OSや言語毎にパケージマネージャとよばれるツールが提供され、ソフトウエアや拡張機能のインストールはパッケージマネージャを利用して行うことができます。 HomebrewはMac用のパッケージマネージャーとなります。 インストール手順 ターミナルを起動する。 インストールページにアクセスし、インストールコマンドを確認します。 ターミナルにインストールコマンドを入力し、実行します。 /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" 動作確認 brewコマンドが実行できればインストール完了です。 brew -v Homebrew 2.2.11 Homebrew/homebrew-core (git revision 23625a; last commit 2020-03-25) 以上でインストールは完了です。 "},"Company.html":{"url":"Company.html","title":"会社紹介","keywords":"","body":"会社紹介 miracleaveでは、「テクノロジーで未来を切り拓く」をミッションに掲げ、 国内だけでなく、今後は海外向けのサービス展開に取り組み、日本を含む世界中の人々に感謝されるようなサービスを提供していきます。 「新しいことに挑戦したい」「自分の技術を磨きたい」など、あなたが持つポジティブなモチベーションを、miracleaveという舞台の「主役」として最大限に発揮しませんか？ 技術スタック この他にもプロジェクトによって、様々なものを活用しています！ mirameetとは 月に1度、社外にも開放した勉強会を様々なテーマで開催しています。一人で勉強して満足するのではなく、“人に伝える”ということも大事にしており、社内外問わず発信しています。 他社さんとタイアップしたり、とにかく楽しく！まずやってみるをモットーにフラットに意見を言い合ってより価値の高いものを作ろうとしています。 ミラコミとは 弊社が独自に運営しているコミュニティです！ コミュニティでは、開発ナレッジ見ることができたり、もくもく会を開催したり、弊社メンバーに限らずベンチャー社員、フリーランスの方が参加しており、技術を高めながら、エンジニア同士の横のつながりも作ることができます。 他にもBBQやダーツ大会、ボードゲーム、スマブラ大会などとにかく楽しくをモットーにスキルアップだけではなく様々なイベントにも参加いただけます。 次回のmirameetについて "}}